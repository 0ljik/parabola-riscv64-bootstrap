--- a/PKGBUILD	2018-03-23 22:23:45.957305112 +0100
+++ b/PKGBUILD	2018-03-24 19:42:50.231346687 +0100
@@ -53,7 +53,9 @@ source=('git+https://github.com/systemd/
         '0004-FSDG-os-release-Default-ID-to-gnu-linux-instead-of-l.patch'
         '0005-FSDG-systemd-resolved-Fallback-hostname-to-gnu-linux.patch'
         '0006-FSDG-man-Use-FSDG-operating-systems-as-examples.patch'
-        '0007-FSDG-bootctl-Say-Systemd-Boot-Manager-instead-of-Lin.patch')
+        '0007-FSDG-bootctl-Say-Systemd-Boot-Manager-instead-of-Lin.patch'
+        '0001-rename-noreturn-into-_noreturn_.patch'
+        '0002-fix-linux-fs-h-and-sys-mount-h-collisions.patch')
 sha512sums=('SKIP'
             'SKIP'
             '9348683829190628e25b7b3300fd880c426d555bde330d5fc5150a9a54b3ad9d4d1f2e69ea1dc6d6f086693dacc53c5af30f1fa7ad9b479791fd77bcdafa430e'
@@ -80,7 +82,9 @@ sha512sums=('SKIP'
             'fbcc54a62b6f3f7ec1dfad8317160c3057f145e542a423a2fd6b5c141012929aeb977491afe35b16c4903b5fd0d1469f3d87d1c8a036b4d6b623ac7dbe682ff5'
             '4e86eac4132d5bd712061d09c14141d91e6bfd2f3879a1fc4a92a15fa77d01552de5c9ebae4a67be2b2a54223a53f2538ba03d4fa0c96ecd1e62a4e8cf341fd1'
             'b94fc1dee0707aec7c94a1e9e709f98a54018f94b44159b95b4a7fd01446bdd30a6b2d440926448c10a33e62092d6cf8e051ef27f26a369797bafbef093418bb'
-            '6a16666f18b7075a68733376f4b1fe34dd2aa29eaf43e693a98e303b9c5202317636816cb4a914d5141801026d1693dd4de2f79e0950aa777e8de6e4879cd9d0')
+            '6a16666f18b7075a68733376f4b1fe34dd2aa29eaf43e693a98e303b9c5202317636816cb4a914d5141801026d1693dd4de2f79e0950aa777e8de6e4879cd9d0'
+            'c1f9d01a3f31c6f0858af3fc21dece4ef5e912946414b5700b1fa9d0307dd2fd81dced5e5ad2bcd7f446a7b5dba89a5c883883df86c9037778ddf39294e60aeb'
+            '3228a6d2b2a070869c1dd3425055b60f7a8a6054650738e4e0548ef597e8d22117bbbe571f92fe165cd7d5016f8f1cf9ebf63299bad3e2061d4df96706659b19')
 
 _backports=(
   # core: do not free heap-allocated strings (#8391) (FS#57741)
@@ -147,6 +151,11 @@ prepare() {
   # Replace cdrom/dialout/tape groups with optical/uucp/storage
   patch -Np1 -i ../0001-Use-Arch-device-access-groups.patch
 
+  # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=893602
+  patch -Np1 -i ../0001-rename-noreturn-into-_noreturn_.patch
+  # https://github.com/systemd/systemd/issues/8507
+  patch -Np1 -i ../0002-fix-linux-fs-h-and-sys-mount-h-collisions.patch
+
   # apply FSDG patches
   local _patch
   for _patch in "$srcdir"/????-FSDG-*.patch; do
--- /dev/null	2018-03-21 10:59:45.661284739 +0100
+++ b/0001-rename-noreturn-into-_noreturn_.patch	2018-03-24 19:42:11.766029988 +0100
@@ -0,0 +1,198 @@
+From 848e863acc51ecfb0f3955c498874588201d9130 Mon Sep 17 00:00:00 2001
+From: Franck Bui <fbui@suse.com>
+Date: Thu, 15 Mar 2018 06:23:46 +0100
+Subject: [PATCH] basic/macros: rename noreturn into _noreturn_ (#8456)
+MIME-Version: 1.0
+Content-Type: text/plain; charset=UTF-8
+Content-Transfer-Encoding: 8bit
+
+"noreturn" is reserved and can be used in other header files we include:
+
+  [   16s] In file included from /usr/include/gcrypt.h:30:0,
+  [   16s]                  from ../src/journal/journal-file.h:26,
+  [   16s]                  from ../src/journal/journal-vacuum.c:31:
+  [   16s] /usr/include/gpg-error.h:1544:46: error: expected ‘,’ or ‘;’ before ‘)’ token
+  [   16s]  void gpgrt_log_bug (const char *fmt, ...)    GPGRT_ATTR_NR_PRINTF(1,2);
+
+Here we include grcrypt.h (which in turns include gpg-error.h) *after* we
+"noreturn" was defined in macro.h.
+---
+ src/basic/log.c                         |  4 ++--
+ src/basic/log.h                         |  4 ++--
+ src/basic/macro.h                       | 19 +++++++++----------
+ src/basic/process-util.c                |  2 +-
+ src/basic/process-util.h                |  2 +-
+ src/core/main.c                         |  4 ++--
+ src/journal/test-journal-interleaving.c |  2 +-
+ src/shared/pager.c                      |  2 +-
+ src/udev/collect/collect.c              |  2 +-
+ 9 files changed, 20 insertions(+), 21 deletions(-)
+
+diff --git a/src/basic/log.c b/src/basic/log.c
+index 7a7f2cbec13..16a2431c548 100644
+--- a/src/basic/log.c
++++ b/src/basic/log.c
+@@ -814,7 +814,7 @@ static void log_assert(
+         log_dispatch_internal(level, 0, file, line, func, NULL, NULL, NULL, NULL, buffer);
+ }
+ 
+-noreturn void log_assert_failed_realm(
++_noreturn_ void log_assert_failed_realm(
+                 LogRealm realm,
+                 const char *text,
+                 const char *file,
+@@ -826,7 +826,7 @@ noreturn void log_assert_failed_realm(
+         abort();
+ }
+ 
+-noreturn void log_assert_failed_unreachable_realm(
++_noreturn_ void log_assert_failed_unreachable_realm(
+                 LogRealm realm,
+                 const char *text,
+                 const char *file,
+diff --git a/src/basic/log.h b/src/basic/log.h
+index efcf0f1bfc1..314be128a23 100644
+--- a/src/basic/log.h
++++ b/src/basic/log.h
+@@ -186,7 +186,7 @@ int log_dump_internal(
+                 char *buffer);
+ 
+ /* Logging for various assertions */
+-noreturn void log_assert_failed_realm(
++_noreturn_ void log_assert_failed_realm(
+                 LogRealm realm,
+                 const char *text,
+                 const char *file,
+@@ -195,7 +195,7 @@ noreturn void log_assert_failed_realm(
+ #define log_assert_failed(text, ...) \
+         log_assert_failed_realm(LOG_REALM, (text), __VA_ARGS__)
+ 
+-noreturn void log_assert_failed_unreachable_realm(
++_noreturn_ void log_assert_failed_unreachable_realm(
+                 LogRealm realm,
+                 const char *text,
+                 const char *file,
+diff --git a/src/basic/macro.h b/src/basic/macro.h
+index 95be63a2040..8911edfc4be 100644
+--- a/src/basic/macro.h
++++ b/src/basic/macro.h
+@@ -53,6 +53,15 @@
+ #else
+ #define _fallthrough_
+ #endif
++/* Define C11 noreturn without <stdnoreturn.h> and even on older gcc
++ * compiler versions */
++#ifndef _noreturn_
++#if __STDC_VERSION__ >= 201112L
++#define _noreturn_ _Noreturn
++#else
++#define _noreturn_ __attribute__((noreturn))
++#endif
++#endif
+ 
+ /* Temporarily disable some warnings */
+ #define DISABLE_WARNING_DECLARATION_AFTER_STATEMENT                     \
+@@ -414,16 +423,6 @@ static inline unsigned long ALIGN_POWER2(unsigned long u) {
+ #endif
+ #endif
+ 
+-/* Define C11 noreturn without <stdnoreturn.h> and even on older gcc
+- * compiler versions */
+-#ifndef noreturn
+-#if __STDC_VERSION__ >= 201112L
+-#define noreturn _Noreturn
+-#else
+-#define noreturn __attribute__((noreturn))
+-#endif
+-#endif
+-
+ #define DEFINE_TRIVIAL_CLEANUP_FUNC(type, func)                 \
+         static inline void func##p(type *p) {                   \
+                 if (*p)                                         \
+diff --git a/src/basic/process-util.c b/src/basic/process-util.c
+index aa9846db5dc..e6120af5b68 100644
+--- a/src/basic/process-util.c
++++ b/src/basic/process-util.c
+@@ -987,7 +987,7 @@ bool is_main_thread(void) {
+         return cached > 0;
+ }
+ 
+-noreturn void freeze(void) {
++_noreturn_ void freeze(void) {
+ 
+         log_close();
+ 
+diff --git a/src/basic/process-util.h b/src/basic/process-util.h
+index 93029e36e5f..5170adec7bb 100644
+--- a/src/basic/process-util.h
++++ b/src/basic/process-util.h
+@@ -91,7 +91,7 @@ int pid_from_same_root_fs(pid_t pid);
+ 
+ bool is_main_thread(void);
+ 
+-noreturn void freeze(void);
++_noreturn_ void freeze(void);
+ 
+ bool oom_score_adjust_is_valid(int oa);
+ 
+diff --git a/src/core/main.c b/src/core/main.c
+index 076846a41c0..4b2d1492373 100644
+--- a/src/core/main.c
++++ b/src/core/main.c
+@@ -141,7 +141,7 @@ static uint64_t arg_default_tasks_max = UINT64_MAX;
+ static sd_id128_t arg_machine_id = {};
+ static EmergencyAction arg_cad_burst_action = EMERGENCY_ACTION_REBOOT_FORCE;
+ 
+-noreturn static void freeze_or_reboot(void) {
++_noreturn_ static void freeze_or_reboot(void) {
+ 
+         if (arg_crash_reboot) {
+                 log_notice("Rebooting in 10s...");
+@@ -156,7 +156,7 @@ noreturn static void freeze_or_reboot(void) {
+         freeze();
+ }
+ 
+-noreturn static void crash(int sig) {
++_noreturn_ static void crash(int sig) {
+         struct sigaction sa;
+         pid_t pid;
+ 
+diff --git a/src/journal/test-journal-interleaving.c b/src/journal/test-journal-interleaving.c
+index 5a88b2774fa..d87bdbdd32a 100644
+--- a/src/journal/test-journal-interleaving.c
++++ b/src/journal/test-journal-interleaving.c
+@@ -37,7 +37,7 @@
+ 
+ static bool arg_keep = false;
+ 
+-noreturn static void log_assert_errno(const char *text, int error, const char *file, int line, const char *func) {
++_noreturn_ static void log_assert_errno(const char *text, int error, const char *file, int line, const char *func) {
+         log_internal(LOG_CRIT, error, file, line, func,
+                      "'%s' failed at %s:%u (%s): %m", text, file, line, func);
+         abort();
+diff --git a/src/shared/pager.c b/src/shared/pager.c
+index 75db3c985bd..681af9c40e3 100644
+--- a/src/shared/pager.c
++++ b/src/shared/pager.c
+@@ -47,7 +47,7 @@ static int stored_stderr = -1;
+ static bool stdout_redirected = false;
+ static bool stderr_redirected = false;
+ 
+-noreturn static void pager_fallback(void) {
++_noreturn_ static void pager_fallback(void) {
+         int r;
+ 
+         r = copy_bytes(STDIN_FILENO, STDOUT_FILENO, (uint64_t) -1, 0);
+diff --git a/src/udev/collect/collect.c b/src/udev/collect/collect.c
+index 2821640e93b..c8fa47b3d7d 100644
+--- a/src/udev/collect/collect.c
++++ b/src/udev/collect/collect.c
+@@ -58,7 +58,7 @@ static inline struct _mate *node_to_mate(struct udev_list_node *node)
+         return container_of(node, struct _mate, node);
+ }
+ 
+-noreturn static void sig_alrm(int signo)
++_noreturn_ static void sig_alrm(int signo)
+ {
+         exit(4);
+ }
--- /dev/null	2018-03-21 10:59:45.661284739 +0100
+++ b/0002-fix-linux-fs-h-and-sys-mount-h-collisions.patch	2018-03-24 19:42:11.767029996 +0100
@@ -0,0 +1,97 @@
+From eb50b6d936c474f5bc2974c059f6432222af4de4 Mon Sep 17 00:00:00 2001
+From: Karel Zak <kzak@redhat.com>
+Date: Thu, 22 Mar 2018 12:50:45 +0100
+Subject: [PATCH] Fix linux/fs.h and sys/mount.h collisions
+
+* (kernel-headers) linux/fs.h and (glibc) sys/mount.h contains MS_* constants
+  and because it's without #ifdefs you cannot include the both files together
+  in the same code
+
+* (systemd) src/basic/missing.h contains another copy of MS_* constants
+
+The patch removes local systemd MS_* fallbacks, cleanup fs.h and
+mount.h include.
+
+Signed-off-by: Karel Zak <kzak@redhat.com>
+---
+ src/basic/missing.h        | 40 ----------------------------------------
+ src/core/load-fragment.c   |  1 -
+ src/shared/bus-unit-util.c |  2 ++
+ 3 files changed, 2 insertions(+), 41 deletions(-)
+
+diff --git a/src/basic/missing.h b/src/basic/missing.h
+index 567aea8da9c..6802dd27c7b 100644
+--- a/src/basic/missing.h
++++ b/src/basic/missing.h
+@@ -524,46 +524,6 @@ struct btrfs_ioctl_quota_ctl_args {
+ #define OCFS2_SUPER_MAGIC 0x7461636f
+ #endif
+ 
+-#ifndef MS_MOVE
+-#define MS_MOVE 8192
+-#endif
+-
+-#ifndef MS_REC
+-#define MS_REC 16384
+-#endif
+-
+-#ifndef MS_PRIVATE
+-#define MS_PRIVATE      (1<<18)
+-#endif
+-
+-#ifndef MS_REC
+-#define MS_REC          (1<<19)
+-#endif
+-
+-#ifndef MS_SHARED
+-#define MS_SHARED       (1<<20)
+-#endif
+-
+-#ifndef MS_RELATIME
+-#define MS_RELATIME     (1<<21)
+-#endif
+-
+-#ifndef MS_KERNMOUNT
+-#define MS_KERNMOUNT    (1<<22)
+-#endif
+-
+-#ifndef MS_I_VERSION
+-#define MS_I_VERSION    (1<<23)
+-#endif
+-
+-#ifndef MS_STRICTATIME
+-#define MS_STRICTATIME  (1<<24)
+-#endif
+-
+-#ifndef MS_LAZYTIME
+-#define MS_LAZYTIME     (1<<25)
+-#endif
+-
+ #ifndef SCM_SECURITY
+ #define SCM_SECURITY 0x03
+ #endif
+diff --git a/src/core/load-fragment.c b/src/core/load-fragment.c
+index 94605ab0d02..49f8a8c6da1 100644
+--- a/src/core/load-fragment.c
++++ b/src/core/load-fragment.c
+@@ -21,7 +21,6 @@
+ 
+ #include <errno.h>
+ #include <fcntl.h>
+-#include <linux/fs.h>
+ #include <linux/oom.h>
+ #if HAVE_SECCOMP
+ #include <seccomp.h>
+diff --git a/src/shared/bus-unit-util.c b/src/shared/bus-unit-util.c
+index 23e05daf48c..6e7ea10e714 100644
+--- a/src/shared/bus-unit-util.c
++++ b/src/shared/bus-unit-util.c
+@@ -52,6 +52,8 @@
+ #include "utf8.h"
+ #include "util.h"
+ 
++#include <sys/mount.h>
++
+ int bus_parse_unit_info(sd_bus_message *message, UnitInfo *u) {
+         assert(message);
+         assert(u);
